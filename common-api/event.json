{
  "swagger": "2.0",
  "info": {
    "title": "EVENT API",
    "version": "1.0",
    "description": "This section contains operations and models of Lianlian Pay notification system. Lianlian Pay uses hypermedia to provide additional information for the client to better processing an Lianlian Pay system generated event. \n\nClient should register event callbacks via Lianlian Pay webhook API in order to receive any event.\n\nProduction Endpoint - **global-api.lianlianpay.com**",
    "contact": {
      "email": "fx_support@lianlianpay.com"
    }
  },
  "host": "global-api-sandbox.lianlianpay-inc.com",
  "paths": {
    "/events": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "properties": {
                "total": {
                  "type": "integer",
                  "description": "Total event count"
                },
                "list": {
                  "type": "array",
                  "description": "Event object list",
                  "items": {
                    "$ref": "#/definitions/event"
                  }
                }
              },
              "required": [
                "total",
                "list"
              ]
            }
          },
          "400": {
            "description": "Possible error codes:\n\n| Code | Description |\n|------|-------------|\n| 999995 | \\[PARAMETER\\] ERROR_MESSAGE |",
            "schema": {
              "$ref": "./error.oas2.yml#/definitions/error"
            }
          },
          "500": {
            "description": ""
          }
        },
        "summary": "Get Event List",
        "description": "Get a list of Lianlian Pay system generated events. Empty list will be returned if there is no applicable events.\n\nReturn type is List<`Event`>",
        "operationId": "get-event-list",
        "tags": [
          "Operations"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "topic",
            "type": "array",
            "description": "Event topic defined in Lianlian Pay's system.",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "pageNum",
            "type": "integer",
            "description": "If nonzero, skip this number of results before returning data. Used with `pageSize` to provide pagination for large datasets.",
            "allowEmptyValue": true,
            "minimum": 1,
            "default": 1
          },
          {
            "in": "query",
            "name": "pageSize",
            "type": "integer",
            "description": "If nonzero, return no more than this number of results. Used with `pageNum` to provide pagination for large datasets. Unless otherwise specified, the maximum number of records that can be returned from an API call is 20 records",
            "allowEmptyValue": true,
            "default": 20
          },
          {
            "in": "query",
            "name": "status",
            "type": "string",
            "default": "MAXIMUM_RETRIES_REACHED",
            "allowEmptyValue": true,
            "enum": [
              "PROCESSING",
              "SUCCESS",
              "MAXIMUM_RETRIES_REACHED"
            ],
            "description": "Event status defined in Lianlian Pay's system. One of:\n\n| status | description |\n|--------|-------------|\n| PROCESSING | Event is under processing |\n| SUCCESS | Successfully notified client via webhook. Received `200` HTTP status code return from registered webhook URL. |\n| MAXIMUM_RETRIES_REACHED | Callback stopped as maximum retry number reached without success. |"
          }
        ]
      }
    },
    "/events/{eventId}": {
      "get": {
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/event"
            }
          },
          "404": {
            "description": ""
          },
          "500": {
            "description": ""
          }
        },
        "summary": "Get Event",
        "description": "Get a Lianlian Pay system generated event by `eventId`\n\nReturn type is `Event` object",
        "tags": [
          "Operations"
        ],
        "operationId": "get-event"
      },
      "parameters": [
        {
          "name": "eventId",
          "in": "path",
          "type": "string",
          "required": true
        }
      ]
    }
  },
  "tags": [
    {
      "name": "Operations"
    }
  ],
  "definitions": {
    "event": {
      "type": "object",
      "title": "Event ",
      "description": "Event object generated by Lianlian Pay's system. \n\nEvent is notified via registered webhook, and default status is `PROCESSING`. \n\nEvent status will be updated to `SUCCESS` after receiving `200` HTTP status code return from webhook url. Before success, Lianlian Pay will keep sending the event to registered webhook url every 60 minutes for 24 times in total. After all 24 retries without success, event status will then be updated to `MAXIMUM_RETRIES_REACHED`.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Event id in Lianlian Pay's system"
        },
        "topic": {
          "$ref": "#/definitions/event-topic-enum"
        },
        "data": {
          "type": "object",
          "description": "Event details",
          "required": [
            "objectId",
            "objectType"
          ],
          "properties": {
            "objectType": {
              "type": "string",
              "description": "Object type related to this event. One of:\n\n| type | description |\n|------|-------------|\n ",
              "enum": [
                "profile",
                "bill",
                "account",
                "document"
              ]
            },
            "objectId": {
              "type": "string",
              "description": "Id of the object that related in this event"
            },
            "url": {
              "type": "string",
              "description": "Event related API endpoint. Can be used to retrive the data object related to this event from Lianlian Pay's system. \n\nHttp method accepted is `GET`, type is `application/json`"
            }
          }
        },
        "createTime": {
          "type": "string",
          "description": "Event created time, UTC+0",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Event status defined in Lianlian Pay's system. One of:\n\n| status | description |\n|--------|-------------|\n| PROCESSING | Event is under processing |\n| SUCCESS | Successfully notified client via webhook. Received `200` HTTP status code return from registered webhook URL. |\n| MAXIMUM_RETRIES_REACHED | Callback notification stopped as maximum retrying number reached. |",
          "enum": [
            "PROCESSING",
            "SUCCESS",
            "MAXIMUM_RETRIES_REACHED"
          ]
        },
        "webhookURL": {
          "type": "string",
          "description": "Registered webhook url for this event"
        }
      },
      "required": [
        "id",
        "topic",
        "data",
        "createTime",
        "webhookURL",
        "status"
      ]
    },
    "event-topic-enum": {
      "type": "string",
      "title": "Event Topic Enumeration",
      "description": "Event topics defined in Lianlian Pay's system.\n\n| Topic | Description |\n|--------|------------|\n| funding.funded | Bill funding received |\n| tuitionEvidence.approved | Tuition evidence approved  |\n| tuitionEvidence.reject | Tuition evidence rejected |\n| exchange.successed | FX(balance transfer) complete |\n| exchange.failed | FX(balance transfer) failed |\n| refunding.successed | Refunding complete |\n| refunding.failed | Refunding failed  |\n| exchangereturn.success | Partial FX reverse complete |\n| exchangereturn.failed | Partial FX reverse failed |\n| exchangecancel.success| FX(balance transfer) reverse complete |\n| exchangecancel.failed| FX(balance transfer) reverse failed |"
    }
  },
  "responses": {},
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "basePath": "/common/V1",
  "securityDefinitions": {
    "llpay-signature": {
      "type": "apiKey",
      "name": "LLPAY-Signature",
      "in": "header",
      "description": "The LLPAY-Signature header contains a timestamp and one or more signatures. The timestamp is prefixed by t=, and each signature is prefixed by a scheme. Schemes start with v, potentially followed by an integer.\n\n```\nLLPAY-Signature: t=1492774577, v=5257a869e7ecebeda32affa62cdca3fa51cad7e77a0e56ff536d0ce8e108d8bd\n```\n\nNote that newlines have been added in the example above for clarity, but a real LLPAY-Signature header will be all one line.\n\nLianlian Pay and clients shall exchange each partyâ€™s public key.  The LLPAY-Signature will be signed by with the RSA private key.\n\n**Step 1:** Determine the signature payload\n\nCreate a `payload` string which is the following connected with `&`\n\n* HTTP_METHOD: The actual method defined for specific API endpoint `POST`\n* URI: The request's URL Path, such as `/profiles/{profileId}`\n* REQUEST_EPOCH: The seconds elapsed since 1970/1/1 00:00:00 GMT, same as value of `t`\n* REQUEST_PAYLOAD: The contents of request body in JSON format. \n* QUERY_STRING: The query string of the URL, URL Encoded, such as `attr1%3Dvalue1%26attr2%3Dvalue2`\n\n<!-- theme: info -->\n>Case 1: QUERY_STRING is empty:\n>\n>**Formula is**: HTTP_METHOD&URI&REQUEST_EPOCH&REQUEST_PAYLOAD\n>\n>---\n>Case 2: REQUEST_PAYLOAD is empty:\n>\n>**Formula is**: HTTP_METHOD&URI&REQUEST_EPOCH&&QUERY_STRING\n>\n>---\n>Case 3: REQUEST_PAYLOAD and QUERY_STRING both are empty:\n>\n>**Formula is**: HTTP_METHOD&URI&REQUEST_EPOCH&\n\n\nPut typical GET and POST examples here.\n\nExample POST `payload`:\n```\nPOST&/kyc/v1/profiles&19879234&{\"profileId\":\"string\",\"countryOfOrigin\":\"CN\",\"type\":\"COMPANY\",\"email\":\"abc@xyz.com\",\"mobile\":\"string\",\"indicator\":\"string\",\"kyc\":{\"name\":\"string\",\"idNumber\":\"string\",\"idFrontCopy\":\"string\",\"idBackCopy\":\"string\",\"address\":{\"lineOne\":\"string\",\"lineTwo\":\"string\",\"city\":\"string\",\"province\":\"string\",\"region\":\"string\",\"postalCode\":\"string\"}}}\n```\n\nExample GET `payload`:\n```\nGET&/events/v1&19879234&&status%3DMAXIMUM_RETRIES_REACHED\n```\n\n\n\n**Step 2:** Prepare the `LLPAY-Signature` string\n\nAchieve this by concatenating:\n* The timestamp (Seconds elapsed since 1970/1/1 00:00:00 GMT as a string)\n* Use your RSA private key and calculate the string `BASE64(RSAwithSHA256(STEP_1_RESULT)))` from Step 1\n\n### Result Signature\n\nLianLian Pay result headers also contain the `LLPAY-Signature` header as described above but signed with Lianlian Pay's private RSA key.  You may verify the signature corresponds to the Result body by calculating the signature and comparing it to the unencrypted version of `LLPAY-Signature` using the Lianlian Pay's public RSA key.  Here are the steps:\n\n**Step 1:** Determine the signature `payload`\n\nCreate a `payload` string which is the following separated by `&`\n\n* Response Timestamp: Extract t from LLPay-Signature and use it as timestamp\n* Response Payload: The contents of response body in JSON format\n\nExample `payload`:\n```\n19879234&{\"profileId\":\"string\",\"countryOfOrigin\":\"CN\",\"type\":\"COMPANY\",\"email\":\"abc@xyz.com\",\"mobile\":\"string\",\"indicator\":\"string\",\"kyc\":{\"name\":\"string\",\"idNumber\":\"string\",\"idFrontCopy\":\"string\",\"idBackCopy\":\"string\",\"address\":{\"lineOne\":\"string\",\"lineTwo\":\"string\",\"city\":\"string\",\"province\":\"string\",\"region\":\"string\",\"postalCode\":\"string\"}}}\n```\n\n**Step 2:** Use RSA Verify to compare signatures\n\nCompare the LLPay-Signature received with the `payload` calculated in Step 1 using the Lianlian Pay's Public Key using the following algorithm:\n\n```\nRSA.verify( LLPAY-Signature, \n            '19879234&{\"profileId\":\"string\",\"countryOfOrigin\":\"CN\",\"type\":\"COMPANY\",\"email\":\"abc@xyz.com\",\"mobile\":\"string\",\"indicator\":\"string\",\"kyc\":{\"name\":\"string\",\"idNumber\":\"string\",\"idFrontCopy\":\"string\",\"idBackCopy\":\"string\",\"address\":{\"lineOne\":\"string\",\"lineTwo\":\"string\",\"city\":\"string\",\"province\":\"string\",\"region\":\"string\",\"postalCode\":\"string\"}}}', \n            Lianlian Pay Public Key )\n```\n"
    },
    "authorization": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header",
      "description": "LianLian Pay API uses an API key to authenticate requests. To request Lianlian Pay developer account, send the following two information to `fx_support@lianlianpay.com`:\n<!-- theme: info -->\n>**developer_name**\n>\n>**developer_public_key**\n\nAfter process, Lianlian Pay will replay with:\n<!-- theme: info -->\n>**developer_master_token** - api authentication\n>\n>**developer_refresh_token** - refresh developer master token, valid for a year. Can be updated by sending request to `fx_support@lianlianpay.com`\n>\n>**LianlianPay_public_key**\n\nThe `Authorization` header must be included in all requests with the following format:\n\n```\nAuthorization: Basic {master_token}\n```"
    }
  },
  "security": [
    {
      "authorization": []
    },
    {
      "llpay-signature": []
    }
  ]
}